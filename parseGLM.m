% parse GridLAB-D .glm files (store .glm files in \glm subdirectory)
% output 'glmStrData.mat' in \results subdirectory
%{
feederIDs = [...
    "GC-12.47-1"...
    "R1-12.47-1",...
    "R1-12.47-2",...
    "R1-12.47-3",...
    "R1-12.47-4",...
    "R1-25.00-1",...
    "R2-12.47-1",...
    "R2-12.47-2",...
    "R2-12.47-3",...
    "R2-25.00-1",...
    "R2-35.00-1",...
    "R3-12.47-1",...
    "R3-12.47-2",...
    "R3-12.47-3",...
    "R4-12.47-1",...
    "R4-12.47-2",...
    "R4-25.00-1",...
    "R5-12.47-1",...
    "R5-12.47-2",...
    "R5-12.47-3",...
    "R5-12.47-4",...
    "R5-12.47-5",...
    "R5-25.00-1",...
    "R5-35.00-1",...
    ];
%}

%% loop through each model
for iModel = 1:length(feederIDs)

    %% (slightly modified) script generated by uiimport
    filename = [pwd,'\glm\',char(feederIDs(iModel)),'.glm'];
    delimiter = {''};
    formatSpec = '%q%[^\n\r]';
    fileID = fopen(filename,'r');
    dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'TextType', 'string',  'ReturnOnError', false);
    fclose(fileID);
    % Replace non-numeric text with NaN.
    raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
    for col=1:length(dataArray)-1
        raw(1:length(dataArray{col}),col) = mat2cell(dataArray{col}, ones(length(dataArray{col}), 1));
    end
    numericData = NaN(size(dataArray{1},1),size(dataArray,2));
    % Split data into numeric and string columns.
    rawNumericColumns = {};
    rawStringColumns = string(raw(:, 1));
    % Create output variable
    glmRawStrArray = rawStringColumns;
    % Clear temporary variables
    clearvars filename delimiter formatSpec fileID dataArray ans raw col numericData rawNumericColumns rawStringColumns;

    %% remove html headers and footers
    dataMask = false(size(glmRawStrArray));
    inHeader = true;
    inData = false;
    for i = 1:length(glmRawStrArray)
        % move through array to find end of html headers
        if inHeader
            if contains(glmRawStrArray(i),"<pre>")
                inHeader = false;
                inData = true;
            end
        end
        if inData
            if contains(glmRawStrArray(i),"</pre>")
                inData = false;
            else
                dataMask(i) = true;
            end
        end
    end
    % apply data mask
    glmStrArray = glmRawStrArray(dataMask);
    % clean first and last line
    glmStrArray(1) = replace(glmStrArray(1),"<pre>","");
    if ~contains(glmStrArray(end),"};")
        glmStrArray(end+1) = "};";
    end
    
    % display results for size validation
    disp(['For model ',char(feederIDs(iModel))])
    disp(['  Total of ',num2str(length(glmStrArray)),' lines of data'])
    disp('  First two lines of data:')
    disp(glmStrArray(1:2))
    disp('  Final two lines of data:')
    disp(glmStrArray(end-1:end))
    
    % save to cell array
    modelData{iModel} = glmStrArray;
end

% clear variables and save workspace
clearvars dataMask glmRawStrArray glmStrArray i inData inHeader iModel
save([pwd,'\results\glmStrData.mat'])