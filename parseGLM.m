function modelData = parseGLM(modelName)
    % parse GridLAB-D prototypical .glm files (store .glm files in \glm subdirectory)
    % only validated on prototypical feeder
    % inputs:
    %   feederIDs: string array of feeder IDs
    % outputs: 
    %   modelData: string arrays

    disp(' ')
    disp(['...parsing model ',char(modelName),' to from .glm to string array...'])
        
    %% (slightly modified) script generated by uiimport
    filename = [pwd,'\glm\',char(modelName),'.glm'];
    delimiter = {''};
    formatSpec = '%q%[^\n\r]';
    fileID = fopen(filename,'r');
    if fileID == -1
        error(['File not found at: ',filename])
    end
    dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'TextType', 'string',  'ReturnOnError', false);
    fclose(fileID);
    % Replace non-numeric text with NaN.
    raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
    for col=1:length(dataArray)-1
        raw(1:length(dataArray{col}),col) = mat2cell(dataArray{col}, ones(length(dataArray{col}), 1));
    end
    numericData = NaN(size(dataArray{1},1),size(dataArray,2));
    % Split data into numeric and string columns.
    rawNumericColumns = {};
    rawStringColumns = string(raw(:, 1));
    % Create output variable
    glmRawStrArray = rawStringColumns;

    % Clear temporary variables
    clearvars filename delimiter formatSpec fileID dataArray ans raw col numericData rawNumericColumns rawStringColumns;

    %% remove html headers and footers
    %{
    dataMask = false(size(glmRawStrArray));
    inHeader = true;
    inData = false;
    for i = 1:length(glmRawStrArray)
        % move through array to find end of html headers
        if inHeader
            if contains(glmRawStrArray(i),"<pre>")
                inHeader = false;
                inData = true;
            end
        end
        if inData
            if contains(glmRawStrArray(i),"</pre>")
                inData = false;
            else
                dataMask(i) = true;
            end
        end
    end
    % apply data mask
    glmStrArray = glmRawStrArray(dataMask);
    % clean first and last line
    glmStrArray(1) = replace(glmStrArray(1),"<pre>","");
    %}

    glmStrArray = glmRawStrArray;

    %if ~contains(glmStrArray(end),"};")
    %    glmStrArray(end+1) = "};";
    %end

    % display results for size validation
    disp(['For model ',char(modelName)])
    disp(['  Total of ',num2str(length(glmStrArray)),' lines of data'])
    disp('  First two lines of data:')
    disp(['    ',char(glmStrArray(1))])
    disp(['    ',char(glmStrArray(1))])
    disp('  Final two lines of data:')
    disp(['    ',char(glmStrArray(end-1))])
    disp(['    ',char(glmStrArray(end))])
    % set as output
    modelData = glmStrArray;
end